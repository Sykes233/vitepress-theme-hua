import{_ as e,o as a,c as i,b as t}from"./chunks/framework.d0149bed.js";const G=JSON.parse('{"title":"开源许可证的选择","description":"","frontmatter":{"layout":"post","mtime":"2022-09-15 11:33","title":"开源许可证的选择"},"headers":[],"relativePath":"开源许可证的选择.md","filePath":"开源许可证的选择.md"}'),r={name:"开源许可证的选择.md"},c=t('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>说起开源，很多人都认为开源就是公开代码，可以随便免费使用的。但是我们接触到的开源软件一般都有对应的开源许可证（Open Source License）对软件的使用、复制、修改和再发布等进行限制。许可证即授权条款，开源许可证就是保证开源软件这些限制的法律文件，目的在于规范受著作权保护的软件的使用或者分发行为。开源许可证是开源软件生态系统的基础，可以促进软件的协同开发。</p><h1 id="开源软件的历史" tabindex="-1">开源软件的历史 <a class="header-anchor" href="#开源软件的历史" aria-label="Permalink to &quot;开源软件的历史&quot;">​</a></h1><p>在计算机诞生初期，都以硬件的销售为主要的收入来源，软件是针对硬件量身定做且免费提供的，所以当时的软件附带有源代码，便于专业人员调试和修改。</p><p>进入70年代后，随着微处理器的出现和个人电脑的普及，逐渐出现了一些专门开发通用软件的公司。自然，这样的软件公司需要对软件收费来获取利润。但软件收费与提供源代码显然是矛盾的，因为只要仍然提供源代码，就无法阻止用户或者竞争对手复制或改写软件代码。因此，到了1983年，在IBM执行“仅目标代码”策略后，几乎所有的软件公司都不再提供软件的源代码。</p><p>在法律方面，美国在1974年到1980年之间逐步通过一系列法律，确定了用著作权法保护软件的路径。</p><p>一些人对于软件从免费转向收费并且不再提供源代码这一现象感到不适应或不满，其中最著名的就是发起了自由软件运动的Richard Stallman（理查德·斯托曼）。</p><p>1983年，理查德·斯托曼 发起了 革奴计划以编写一可以不受限制使用源代码的操作系统。 发起这项运动的部分原因是一打印机的功能无法被正常修复，而这是因为用户被阻止使用其源代码。 斯托曼在1985年出版了 GNU宣言，在文中，他描述了革奴计划的愿景和自由软件的重要性。 另一可能的发起革奴计划以及推出 GNU 宣言的原因是斯托曼和 Symbolics, Inc. 的矛盾。在启动这项运动后，斯托曼使用了已经存在的术语“free software”（自由软件）。在1986年，为了推广《自由软件定义（英语：The Free Software Definition）》，他建立了自由软件基金会。</p><p>1989 年，该基金会发布了第一版的GNU通用公共许可证（GPL），并在1991年发布了进行了少量更新的第二版。 其特征为：适用该许可证的代码的所有衍生代码都必须开源并且基于相同的许可证发布，具有鲜明的著佐权（copyleft）性质。Richard的自由软件运动影响了很多人，包括维基百科的创始人Jimmy Wales。</p><p>林纳斯·托瓦兹在1991年发布了Linux 内核，并且允许其他人自由地修改源代码。当时的协议并非自由软件协议，但在1992年2月，托瓦兹使用了GPL协议重新发布了 Linux 的0.12版本。因为形似 unix，这个内核吸引了当时很多编程志愿者的注意。在这之前，因为 GNU 当中项目没有合适的系统内核，所以当时并不存在完全自由的操作系统。Linux 和其他几乎已经完成的 GNU 操作系统的部件的结合制造出了第一个真正是自由软件的操作系统。</p><h1 id="几种开源协议的比较图" tabindex="-1">几种开源协议的比较图 <a class="header-anchor" href="#几种开源协议的比较图" aria-label="Permalink to &quot;几种开源协议的比较图&quot;">​</a></h1><p>常用的开源协议大致有<code>GPL</code>、<code>BSD</code>、<code>MIT</code>、<code>Mozilla</code>、<code>Apache</code>和<code>LGPL</code>这6种</p><p><img src="https://s2.loli.net/2023/10/17/IDGevW8V2ZMndhk.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/10/17/WcmPk3oXMN96AT5.png" alt="image-1663211758521.png"></p><p><img src="https://s2.loli.net/2023/10/17/ayHbITopqYO8tJ2.png" alt="image-1663211776250.png"></p><h1 id="几种开源协议的介绍" tabindex="-1">几种开源协议的介绍 <a class="header-anchor" href="#几种开源协议的介绍" aria-label="Permalink to &quot;几种开源协议的介绍&quot;">​</a></h1><h2 id="bsd协议" tabindex="-1">BSD协议 <a class="header-anchor" href="#bsd协议" aria-label="Permalink to &quot;BSD协议&quot;">​</a></h2><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p><p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li></ol><p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h2 id="apache-licence-2-0" tabindex="-1">Apache Licence 2.0 <a class="header-anchor" href="#apache-licence-2-0" aria-label="Permalink to &quot;Apache Licence 2.0&quot;">​</a></h2><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ol><li>需要给代码的用户一份Apache Licence</li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li></ol><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p><h2 id="gpl" tabindex="-1">GPL <a class="header-anchor" href="#gpl" aria-label="Permalink to &quot;GPL&quot;">​</a></h2><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p><p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p><p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p><p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p><h2 id="lgpl" tabindex="-1">LGPL <a class="header-anchor" href="#lgpl" aria-label="Permalink to &quot;LGPL&quot;">​</a></h2><p>GNU宽通用公共许可证GNU Lesser General Public License简称LGPL，是由自由软件基金会公布的自由软件授权条款。此许可证最新版本为Version 3。</p><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h2 id="mit" tabindex="-1">MIT <a class="header-anchor" href="#mit" aria-label="Permalink to &quot;MIT&quot;">​</a></h2><p>MIT许可协议是许多软件授权条款中，被广泛使用的其中一种。与其他常见的软件许可协议（如GPL、LGPL、BSD）相比，MIT是相对宽松的软件许可协议。作者只想保留版权,而无任何其他了限制。也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的。 MIT许可协议之名源自麻省理工学院Massachusetts Institute of Technology, MIT，又称X许可协议（X License）或X11许可协议（X11 License） MIT内容与三条款BSD许可协议3-clause BSD license内容颇为近似，但是赋予软件被授权人更大的权利与更少的限制。</p><p>参考文章： <a href="https://developer.aliyun.com/article/278700" target="_blank" rel="noreferrer">五种开源协议的比较(BSD,Apache,GPL,LGPL,MIT) – 整理</a><br><a href="https://github.com/qyxxjd/License" target="_blank" rel="noreferrer">常见的开源协议</a><br><a href="https://cn.pingcap.com/blog/introduction-of-open-source-license" target="_blank" rel="noreferrer">一文看懂开源许可证丨开源知识科普</a><br><a href="https://zh.m.wikipedia.org/zh-hans/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6%E5%8E%86%E5%8F%B2" target="_blank" rel="noreferrer">自由软件历史wiki</a><br><a href="https://zh.m.wikipedia.org/zh-hans/%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="noreferrer">软件许可证wiki</a></p>',38),l=[c];function o(n,p,h,s,L,d){return a(),i("div",null,l)}const u=e(r,[["render",o]]);export{G as __pageData,u as default};
