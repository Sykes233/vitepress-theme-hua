import{_ as a,r as n,o,c as p,a as l,w as t,b as e,e as c}from"./chunks/framework.d0149bed.js";const k=JSON.parse('{"title":"关于我把Sakura主题的个性签名魔改成一言接口这件事","description":"","frontmatter":{"layout":"post","mtime":"2021-10-26T00:00:00.000Z","title":"关于我把Sakura主题的个性签名魔改成一言接口这件事"},"headers":[],"relativePath":"关于我把Sakura主题的个性签名魔改成一言接口这件事.md","filePath":"关于我把Sakura主题的个性签名魔改成一言接口这件事.md"}'),r={name:"关于我把Sakura主题的个性签名魔改成一言接口这件事.md"},E=e(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>开始，Sakura主题的个性签名是这样的： <img src="https://s2.loli.net/2023/10/17/TSugxjDkBMwPKpN.png" alt="Sakura_old-9f4a5eef48124865acaef6c8ce6c7642.png"></p><p><img src="https://s2.loli.net/2023/10/17/M24phAJfZo6EOS5.png" alt="Sakura_old2.png"></p><p>也就是说这个东西是和后台关联的，后台的个性签名是什么，前台就是什么。这时，我就想，定死多没意思，如果能刷新一次页面变一下多好。</p><h1 id="定位位置" tabindex="-1">定位位置 <a class="header-anchor" href="#定位位置" aria-label="Permalink to &quot;定位位置&quot;">​</a></h1><p>我们在网页审查元素定位倒这个元素的位置：</p><p><img src="https://s2.loli.net/2023/10/17/3XGrEaUjDJO5mxP.png" alt="Sakura_modify2.png"></p><p>在Sakura源码中定位到类似的代码片段：</p><p><img src="https://s2.loli.net/2023/10/17/GXt6dfUFPhzmHAD.png" alt="Sakura_modify.png"></p><h1 id="改成一言api" tabindex="-1">改成一言API <a class="header-anchor" href="#改成一言api" aria-label="Permalink to &quot;改成一言API&quot;">​</a></h1><p>找到<a href="https://hitokoto.cn/" target="_blank" rel="noreferrer">一言接口官网</a>：</p><p>官网给了一个使用实例：</p><p><img src="https://s2.loli.net/2023/10/17/GqoZkjnYwur4PQT.png" alt="hitokoto2.png"></p><p>我们就采用第一个ES6的写法，先将定位的：那一行中的模板<code>\${user.description}</code>替换成自己的标签:</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hitokoto&quot;</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hitokoto_text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">target</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;_blank&quot;</span><span style="color:#E1E4E8;">&gt;:D 获取中...&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hitokoto&quot;</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hitokoto_text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">target</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;_blank&quot;</span><span style="color:#24292E;">&gt;:D 获取中...&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在定位的文件<code>imgbox.ftl</code>底部补上Script：</p><div class="language-HTML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://v1.hitokoto.cn&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hitokoto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hitokoto_text&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      hitokoto.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://hitokoto.cn/?uuid=&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> data.uuid</span></span>
<span class="line"><span style="color:#E1E4E8;">      hitokoto.innerText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.hitokoto</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(console.error)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://v1.hitokoto.cn&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hitokoto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hitokoto_text&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      hitokoto.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://hitokoto.cn/?uuid=&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> data.uuid</span></span>
<span class="line"><span style="color:#24292E;">      hitokoto.innerText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.hitokoto</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(console.error)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>就此，大功告成了！</p>`,18);function y(i,h,d,u,_,F){const s=n("a-alert");return o(),p("div",null,[l(s,null,{default:t(()=>[c("这篇是以前用halo CMS的时候写的，只适用于halo")]),_:1}),E])}const m=a(r,[["render",y]]);export{k as __pageData,m as default};
